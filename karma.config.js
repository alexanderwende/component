const pluginLocalResolve = require('rollup-plugin-local-resolve');
const pluginNodeResolve = require('rollup-plugin-node-resolve');
const pluginCommonJS = require('rollup-plugin-commonjs');
const pluginIstanbul = require('rollup-plugin-istanbul');

module.exports = function (config) {

    config.set({

        // base path that will be used to resolve all patterns (eg. files, exclude)
        basePath: './',


        // frameworks to use
        // available frameworks: https://npmjs.org/browse/keyword/karma-adapter
        frameworks: ['jasmine'],


        // list of files / patterns to load in the browser
        files: [
            // don't watch the spec files, rollup-preprocessor will watch them
            { pattern: 'dev/**/*.spec.js', watched: false }
        ],


        // list of files / patterns to exclude
        // exclude: [],


        // preprocess matching files before serving them to the browser
        // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor
        preprocessors: {
            'dev/**/*.js': ['rollup']
        },


        // test results reporter to use
        // possible values: 'dots', 'progress'
        // available reporters: https://npmjs.org/browse/keyword/karma-reporter
        reporters: ['mocha', 'coverage', 'remap-coverage'],


        // rollup preprocessor configuration
        // karma cannot process es6 modules in test files, so we need to bundle our specs with rollup
        // in order to get proper coverage reports with accurate source mapping to the original typescript
        // sources, we manually instrument the compiled js sources (which have external source maps) with
        // istanbul
        // the coverage reporter will create an in-memory coverage report for the bundled spec which we can
        // then remap with the remap-coverage reporter using the sourcemaps generated by typescipt
        rollupPreprocessor: {
            plugins: [
                pluginLocalResolve(),
                pluginNodeResolve(),
                pluginCommonJS(),
                pluginIstanbul({
                    include: [
                        'dev/**/*.js'
                    ],
                    exclude: [
                        '**/*.spec.js'
                    ]
                }),
            ],
            onwarn: (warning) => {

                // this warning happens due to how typescript compiles decorators
                if (warning.code === 'THIS_IS_UNDEFINED') return;

                console.error(warning.code, warning.message);
            },
            output: {
                dir: 'dev',
                format: 'iife',
                sourcemap: 'inline'
            }
        },


        // coverage reporter should produce reports in memory
        // remap-coverage reporter will use that and remap it
        // to the original typescript sources
        coverageReporter: {
            type: 'in-memory'
        },


        // remap-coverage reporter will create html report in
        // the coverage folder and output a text result on the
        // console, additional reports can be configured here
        remapCoverageReporter: {
            html: './coverage/html',
            lcovonly: 'coverage/lcov.info',
            text: null
        },


        // web server port
        port: 9876,


        // enable / disable colors in the output (reporters and logs)
        colors: true,


        // level of logging
        // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG
        logLevel: config.LOG_INFO,


        // enable / disable watching file and executing tests whenever any file changes
        autoWatch: false,


        // start these browsers
        // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher
        browsers: ['ChromeHeadless'],


        // Continuous Integration mode
        // if true, Karma captures browsers, runs the tests and exits
        singleRun: true,

        // Concurrency level
        // how many browser should be started simultaneous
        concurrency: Infinity
    });
};
