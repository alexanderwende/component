import{html as t,render as e}from"lit-html";import*as r from"lit-html";export{r as lit};const s=/\s+([\S])/g,o=/[a-z]([A-Z])/g;function n(t){let e;if(t){for(t=t.trim();e=s.exec(t);)t=t.replace(e[0],"-"+e[1]),s.lastIndex=0;for(;e=o.exec(t);)t=t.replace(e[0],e[0][0]+"-"+e[1]),o.lastIndex=0}return t?t.toLowerCase():t}const i=t=>new Error(`Error executing property reflector ${t}.`),c=t=>new Error(`Error executing property notifier ${t}.`);class a extends HTMLElement{constructor(){super(),this._updateRequest=Promise.resolve(!0),this._changedProperties=new Map,this._notifyingProperties=new Map,this._listenerDeclarations=[],this._isConnected=!1,this._hasRequestedUpdate=!1,this._isReflecting=!1,this._renderRoot=this.createRenderRoot(),console.log("constructed... ",this.constructor.name)}static get observedAttributes(){return[]}get isConnected(){return this._isConnected}createRenderRoot(){return this.constructor.shadow?this.attachShadow({mode:"open"}):this}adoptedCallback(){}connectedCallback(){console.log("connected... ",this.constructor.name),this._listen(),this.requestUpdate()}disconnectedCallback(){console.log("disconnected... ",this.constructor.name),this._unlisten()}attributeChangedCallback(t,e,r){}propertyChangedCallback(t,e,r){}template(){return t``}render(){console.log("render()... ",this.constructor.name),e(this.template(),this._renderRoot),this.renderCallback()}renderCallback(){console.log("rendered... ",this.constructor.name)}update(t){console.log("update()... ",t),this.render(),t.forEach((t,e)=>{const r=this._getPropertyDeclaration(e),s=this[e];if(r.reflect)if("function"==typeof r.reflect)try{r.reflect.call(this,e,t,s)}catch(t){throw i(r.reflect.toString())}else if("string"==typeof r.reflect)try{this[r.reflect](e,t,s)}catch(t){throw i(r.reflect)}else this._reflect(e,t,s)}),this._notifyingProperties.forEach((t,e)=>{const r=this._getPropertyDeclaration(e),s=this[e];if(r.notify)if("function"==typeof r.notify)try{r.notify.call(this,e,t,s)}catch(t){throw c(r.notify.toString())}else if("string"==typeof r.notify)try{this[r.notify](e,t,s)}catch(t){throw c(r.notify)}else this._notify(e,t,s)})}notifyChanges(t){const e=new Map(this._changedProperties);t();for(const[t,r]of this._changedProperties)e.has(t)&&e.get(t)===r||this._notifyingProperties.set(t,r)}_notify(t,e,r){const s=`${n(t)}-changed`;this.dispatchEvent(new CustomEvent(s,{composed:!0,detail:{property:t,previous:e,current:r}})),console.log(`notify ${s}...`)}_reflect(t,e,r){const s=this._getPropertyDeclaration(t),o=s.attribute||n(t),i=s.toAttribute(r);null===i?this.removeAttribute(o):this.setAttribute(o,i)}_listen(){Object.entries(this.constructor.listenerDeclarations).forEach(([t,e])=>{const r={event:e.event,options:e.options,listener:this[t].bind(this),target:e.target?"function"==typeof e.target?e.target():e.target:this};r.target.addEventListener(r.event,r.listener,r.options),this._listenerDeclarations.push(r)})}_unlisten(){this._listenerDeclarations.forEach(t=>{t.target.removeEventListener(t.event,t.listener,t.options)})}requestUpdate(t,e,r){console.log("requestUpdate()... ",this.constructor.name);const s=this.constructor;if(t&&t in s.propertyDeclarations){const o=s.propertyDeclarations[t];if(console.log(`requestUpdate()... ${t} observe: ${o.observe}`),!o.observe)return this._updateRequest;if(o.hasChanged&&!o.hasChanged(e,r))return this._updateRequest;this._changedProperties.set(t,e)}return this._hasRequestedUpdate||this._enqueueUpdate(),this._updateRequest}_performUpdate(){return console.log("performUpdate()... ",this.constructor.name),new Promise(t=>{requestAnimationFrame(()=>{this.update(this._changedProperties),this._changedProperties=new Map,this._notifyingProperties=new Map,this._hasRequestedUpdate=!1,t()})})}async _enqueueUpdate(){let t;console.log("enqueueUpdate()... ",this.constructor.name);const e=this._updateRequest;this._hasRequestedUpdate=!0,this._updateRequest=new Promise(e=>t=e),await e;const r=this._performUpdate();await r,t(!this._hasRequestedUpdate)}_getPropertyDeclaration(t){return this.constructor.propertyDeclarations[t]}}a.propertyDeclarations={},a.listenerDeclarations={};const h={selector:"",shadow:!0,define:!0},l=(t={})=>(t=Object.assign({},h,t),e=>{e.selector=t.selector?t.selector:e.selector,e.shadow=t.shadow,t.define&&window.customElements.define(e.selector,e)}),p={observe:!0,notify:!1,reflect:!1,hasChanged:(t,e)=>t!==e&&(t==t||e==e),toAttribute:t=>t.toString(),fromAttribute:t=>t},u=(t={})=>(e,r)=>{const s=function(t,e){if(e in t)for(;t!==Object.prototype;){if(t.hasOwnProperty(e))return Object.getOwnPropertyDescriptor(t,e);t=Object.getPrototypeOf(t)}return}(e,r),o="string"==typeof r?`_${r}`:Symbol(),n=s&&s.get||function(){return this[o]},i=s&&s.set||function(t){this[o]=t};Object.defineProperty(e,r,{configurable:!0,enumerable:!0,get(){return n.call(this)},set(t){console.log(`setting ${r}...`,t);const e=this[r];i.call(this,t),this.requestUpdate(r,e,t)}}),e.constructor.propertyDeclarations[r]=Object.assign({},p,t)};export{a as CustomElement,h as DEFAULT_CUSTOM_ELEMENT_DECLARATION,l as customElement,p as DEFAULT_PROPERTY_DECLARATION,u as property};
//# sourceMappingURL=index.esm.js.map
